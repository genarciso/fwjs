{
    "pipes": [],
    "interfaces": [
        {
            "name": "Answer",
            "id": "interface-Answer-106835f9f253707b1abd832b93ec93da6230fc4ba6c614975dbb554af8b77d8dbe0e220d5bb0d06619b37517816dcd94d9830a359eed805039dcd77054aecf26",
            "file": "src/app/components/results.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from \"@angular/core\"\n\n/** Dados da resposta de uma questão. */\nexport interface Answer {\n  statement: string  // enunciado da questão\n  option: string     // resposta da opção escolhida\n}\n\n@Component({\n  selector: 'app-results',\n  template: `\n    <div class=\"questionResult\" *ngFor=\"let answer of answers; let i = index\">\n      <h3>Questão {{ i + 1 }}</h3>\n      {{ answer.statement }}: {{ answer.option }}\n    </div>\n  `,\n  styles: [`\n    .questionResult + .questionResult {\n      margin-top: 10px;\n    }\n    .questionResult h3 {\n      margin: 0;\n    }\n  `]\n})\nexport class ResultsComponent {\n  @Input() answers!: Answer[]\n}",
            "properties": [
                {
                    "name": "option",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "statement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Dados da resposta de uma questão.</p>\n",
            "rawdescription": "\nDados da resposta de uma questão.",
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ConteudoService",
            "id": "injectable-ConteudoService-a6113c599073cc09bbe2c7f3c94c4c16ea27abb781d892a0d08736605ed56db73aa34b87c8f0f5c7a638347641db944687d56805c7e7ce9fc5661deb4a5bb16e",
            "file": "src/app/services/conteudo.service.ts",
            "properties": [
                {
                    "name": "painelInfo",
                    "defaultValue": "new PainelInfo()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PainelInfo",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "painelInfo",
                            "type": "PainelInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "painelInfo",
                            "type": "PainelInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nexport class PainelInfo {\n  constructor(\n    public qtdAbas: number = 1,   // Quantidade de abas que devem ter\n    public abas: ConteudoAba[] = [new ConteudoAba()]    // Array com o conteudo das abas\n  ) {}\n}\n\nexport class ConteudoAba {\n  constructor(\n    public titulo: string = '',             // titulo da aba\n    public conteudo: string = '',           // conteúdo da aba\n    public aba: number = 0                  // aba no qual pertence\n  ) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConteudoService {\n  painelInfo: PainelInfo = new PainelInfo()\n\n  add(painelInfo: PainelInfo) {\n    this.painelInfo = painelInfo\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "QuestionService",
            "id": "injectable-QuestionService-1df53f976854a7b667ccbc9aa6eda11f4a002b7608eb89cb284109a177ee91025694db9d76f731baf569ecb9c7da7290849b36e4620529bc9f85db74e4bdb5ba",
            "file": "src/app/services/question.service.ts",
            "properties": [
                {
                    "name": "questions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Question[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "question",
                            "type": "Question",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "Question",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "question",
                            "type": "Question",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "question",
                            "type": "Question",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nexport class Question {\n  selection?: number // índice da opção selecionada, se houver\n\n  constructor(\n    public statement: string = '',             // enunciado obrigatório\n    public type: 'text' | 'choice' = 'text',   // tipo default\n    public options: string[] = ['sim', 'não'], // opções default\n  ) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  questions: Question[] = []\n\n  add(question: Question) {\n    this.questions.push(question)\n  }\n\n  delete(index: number) {\n    this.questions.splice(index, 1)\n  }\n\n  update(index: number, question: Question) {\n    this.questions[index] = question\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ConteudoAba",
            "id": "class-ConteudoAba-a6113c599073cc09bbe2c7f3c94c4c16ea27abb781d892a0d08736605ed56db73aa34b87c8f0f5c7a638347641db944687d56805c7e7ce9fc5661deb4a5bb16e",
            "file": "src/app/services/conteudo.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nexport class PainelInfo {\n  constructor(\n    public qtdAbas: number = 1,   // Quantidade de abas que devem ter\n    public abas: ConteudoAba[] = [new ConteudoAba()]    // Array com o conteudo das abas\n  ) {}\n}\n\nexport class ConteudoAba {\n  constructor(\n    public titulo: string = '',             // titulo da aba\n    public conteudo: string = '',           // conteúdo da aba\n    public aba: number = 0                  // aba no qual pertence\n  ) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConteudoService {\n  painelInfo: PainelInfo = new PainelInfo()\n\n  add(painelInfo: PainelInfo) {\n    this.painelInfo = painelInfo\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titulo",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "conteudo",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "aba",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titulo",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "conteudo",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "aba",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "aba",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "conteudo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "titulo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PainelInfo",
            "id": "class-PainelInfo-a6113c599073cc09bbe2c7f3c94c4c16ea27abb781d892a0d08736605ed56db73aa34b87c8f0f5c7a638347641db944687d56805c7e7ce9fc5661deb4a5bb16e",
            "file": "src/app/services/conteudo.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nexport class PainelInfo {\n  constructor(\n    public qtdAbas: number = 1,   // Quantidade de abas que devem ter\n    public abas: ConteudoAba[] = [new ConteudoAba()]    // Array com o conteudo das abas\n  ) {}\n}\n\nexport class ConteudoAba {\n  constructor(\n    public titulo: string = '',             // titulo da aba\n    public conteudo: string = '',           // conteúdo da aba\n    public aba: number = 0                  // aba no qual pertence\n  ) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConteudoService {\n  painelInfo: PainelInfo = new PainelInfo()\n\n  add(painelInfo: PainelInfo) {\n    this.painelInfo = painelInfo\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "qtdAbas",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "1"
                    },
                    {
                        "name": "abas",
                        "type": "ConteudoAba[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[new ConteudoAba()]"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "qtdAbas",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "1",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "abas",
                        "type": "ConteudoAba[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[new ConteudoAba()]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "abas",
                    "defaultValue": "[new ConteudoAba()]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConteudoAba[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "qtdAbas",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Question",
            "id": "class-Question-1df53f976854a7b667ccbc9aa6eda11f4a002b7608eb89cb284109a177ee91025694db9d76f731baf569ecb9c7da7290849b36e4620529bc9f85db74e4bdb5ba",
            "file": "src/app/services/question.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\nexport class Question {\n  selection?: number // índice da opção selecionada, se houver\n\n  constructor(\n    public statement: string = '',             // enunciado obrigatório\n    public type: 'text' | 'choice' = 'text',   // tipo default\n    public options: string[] = ['sim', 'não'], // opções default\n  ) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  questions: Question[] = []\n\n  add(question: Question) {\n    this.questions.push(question)\n  }\n\n  delete(index: number) {\n    this.questions.splice(index, 1)\n  }\n\n  update(index: number, question: Question) {\n    this.questions[index] = question\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statement",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "type",
                        "type": "\"text\" | \"choice\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'text'"
                    },
                    {
                        "name": "options",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "['sim', 'não']"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "statement",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "\"text\" | \"choice\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'text'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "['sim', 'não']",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "options",
                    "defaultValue": "['sim', 'não']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "statement",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"choice\"",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bf657525c152ce996e696e2da54e62feb85bc2b257e8b106568a173a207e2b46b8b3282d5bffaa3655122beaf4493385587d39a38757f95270073e552eb0c711",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<app-main></app-main>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core'\n\n@Component({\n  selector: 'app-root',\n  // template: `<app-quiz></app-quiz>`\n  // template: `<app-question-list></app-question-list>`\n  template: `<app-main></app-main>`\n})\n\nexport class AppComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConteudoFormComponent",
            "id": "component-ConteudoFormComponent-ebf9d884194303663e8a80ab7019134e275abffaaccfe828762aa2adafbb516120e44c750fc37b73830af2a2866cc6e40d9e8be470c70183fe5a143607778dad",
            "file": "src/app/components/conteudo-form/conteudo-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-conteudo-form",
            "styleUrls": [
                "./conteudo-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./conteudo-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'conteudoForm'"
                        }
                    ]
                },
                {
                    "name": "numAbasForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgModel",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'numAbas'"
                        }
                    ]
                },
                {
                    "name": "painelInfo",
                    "defaultValue": "new PainelInfo()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PainelInfo",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "qtdConteudos",
                    "defaultValue": "[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "mudarQtdAbas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {NgForm, NgModel} from \"@angular/forms\";\nimport {ConteudoAba, ConteudoService, PainelInfo} from \"../../services/conteudo.service\";\n\n@Component({\n  selector: 'app-conteudo-form',\n  templateUrl: './conteudo-form.component.html',\n  styleUrls: ['./conteudo-form.component.css']\n})\nexport class ConteudoFormComponent implements OnInit {\n  painelInfo: PainelInfo = new PainelInfo();\n  qtdConteudos: number[] = [0]\n  @ViewChild(\"conteudoForm\") form!: NgForm\n  @ViewChild(\"numAbas\") numAbasForm!: NgModel\n\n  constructor(private conteudoService: ConteudoService) {\n    this.qtdConteudos = Array(this.painelInfo.qtdAbas).fill(1).map((x,i)=>i++);\n  }\n\n  ngOnInit(): void {\n  }\n\n  mudarQtdAbas() {\n    if (this.numAbasForm.valid) {\n      this.qtdConteudos = Array(this.painelInfo.qtdAbas).fill(1).map((x, i) => i++);\n      while (this.painelInfo.abas.length < this.painelInfo.qtdAbas) {\n        this.painelInfo.abas.push(new ConteudoAba())\n      }\n      while (this.painelInfo.abas.length > this.painelInfo.qtdAbas) {\n        this.painelInfo.abas.pop()\n      }\n    }\n  }\n\n  submit() {\n    let abasCadastradas: ConteudoAba[]  = Object.entries(this.form.value).map(item => {\n      if (item[0].startsWith(\"abas-\")) {\n        return item[1] as ConteudoAba\n      }\n      return\n    }).filter(item => item) as ConteudoAba[]\n    abasCadastradas.forEach((aba, index) => aba.aba = index)\n    this.conteudoService.add({\n      abas: abasCadastradas,\n      qtdAbas: this.painelInfo.qtdAbas\n    } as PainelInfo)\n\n    this.form.resetForm()\n    this.painelInfo = new PainelInfo()\n    this.qtdConteudos = Array(this.painelInfo.qtdAbas).fill(1).map((x,i)=>i++);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".qst-form {\n  --label-size: 150px;\n  --label-margin: 10px;\n  --label-width: calc(var(--label-size) + var(--label-margin));\n  --border-size: 1px;\n  --border-color: #ccc;\n  --border-radius: 5px;\n  --input-padding: 5px;\n  --input-number-size: 30pt;\n  padding: 20px;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n}\n.qst-form label {\n  width: var(--label-size);\n  display: inline-block;\n  text-align: right;\n  font-weight: bold;\n  margin-right: var(--label-margin);\n  vertical-align: top;\n}\n.qst-form .errors {\n  font-style: italic;\n  font-size: 10pt;\n  color: red;\n  margin-left: var(--label-width);\n  height: 20pt;\n}\n.qst-form .buttons {\n  margin-top: 10px;\n  padding-top: 10px;\n  border-top: var(--border-size) solid var(--border-color);\n  display: flex;\n  justify-content: flex-end;\n}\n.qst-form textarea {\n  height: 100px;\n  margin-bottom: -5pt;\n}\n.qst-form input[type=\"submit\"] {\n  padding: 4pt 8pt;\n}\n.qst-form input[type=\"radio\"]:not(:first-child) {\n  margin-left: 20px;\n}\n.qst-form input[type=\"text\"],\n.qst-form input[type=\"number\"],\n.qst-form textarea {\n  border-radius: var(--border-radius);\n  border: var(--border-size) solid var(--border-color);\n  padding: var(--input-padding);\n}\n.qst-form input[type=\"text\"],\n.qst-form textarea {\n  width: calc(100% - (var(--label-width) + 2 * (var(--border-size) + var(--input-padding))));\n}\n.qst-form input[type=\"number\"] {\n  width: var(--input-number-size);\n}\n",
                    "styleUrl": "./conteudo-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "conteudoService",
                        "type": "ConteudoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "conteudoService",
                        "type": "ConteudoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"qst-form \" #conteudoForm=\"ngForm\" (ngSubmit)=\"conteudoForm.valid && submit()\">\n  <div>\n    <label>Número de abas</label>\n    <input type=\"number\"\n           name=\"numAbas\"\n           #numAbas=\"ngModel\"\n           [(ngModel)] =\"painelInfo.qtdAbas\"\n           (change)=\"mudarQtdAbas()\"\n            min=\"1\" max=\"5\" required\n    />\n    <div *ngIf=\"(numAbas.dirty || conteudoForm.submitted) && numAbas.errors\" class=\"errors\">\n      <div *ngIf=\"numAbas.errors['min']\">\n        Deve haver pelo menos uma aba\n      </div>\n      <div *ngIf=\"numAbas.errors['max']\">\n        Deve haver no máximo cinco opções\n      </div>\n      <div *ngIf=\"numAbas.errors['required']\">\n        É necessário preencher esse campo\n      </div>\n    </div>\n  </div>\n  <div *ngFor=\"let indice of qtdConteudos\" ngModelGroup=\"abas-{{indice}}\">\n    <div>\n      <label>Título</label>\n      <input type=\"text\"\n             #tituloConteudo=\"ngModel\"\n             name=\"titulo\"\n             [(ngModel)]=\"painelInfo.abas[indice].titulo\"\n             required\n      />\n      <div *ngIf=\"(tituloConteudo.touched || conteudoForm.submitted) && tituloConteudo.errors\" class=\"errors\">\n        <div *ngIf=\"tituloConteudo.errors['required']\">\n          É necessário informar o título da aba\n        </div>\n      </div>\n    </div>\n    <div>\n      <label>Conteúdo</label>\n      <textarea #cont=\"ngModel\"\n                [(ngModel)]=\"painelInfo.abas[indice].conteudo\"\n                name=\"conteudo\"\n                required>\n      </textarea>\n      <div *ngIf=\"(cont.touched || conteudoForm.submitted) && cont.errors\" class=\"errors\">\n        <div *ngIf=\"cont.errors['required']\">\n          É necessário informar o contéudo da aba\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <input type=\"submit\" value=\"Salvar\"/>\n</form>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-bd920806e724fc7d8cd21bb4c37e8a170e1777fc09bebdbb52fa43b58b40fd2b7036d612a47e19ce8b10d37803595ec33ea946309a311ae39445bcecec6fd4c6",
            "file": "src/app/components/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "abaSelecionada",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "conteudos",
                    "defaultValue": "[{\n    titulo: \"Aba 1\",\n    conteudo: \"Conteudo 1\"\n  }, {\n    titulo: \"Aba 2\",\n    conteudo: \"Conteudo 2\"\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent {\n  conteudos = [{\n    titulo: \"Aba 1\",\n    conteudo: \"Conteudo 1\"\n  }, {\n    titulo: \"Aba 2\",\n    conteudo: \"Conteudo 2\"\n  }]\n  abaSelecionada: number = 0\n\n\n  constructor() {}\n\n  select(optionIndex: number) {\n    this.abaSelecionada = optionIndex\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#main {\n  background-color: aliceblue;\n}\n",
                    "styleUrl": "./main.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "templateData": "<div id = \"main\">\n  <app-conteudo-form></app-conteudo-form>\n  <app-menu (selecao)=\"select($event)\" [conteudos]=\"conteudos\"></app-menu>\n  <app-painel [conteudo]=\"conteudos[abaSelecionada].conteudo\"> </app-painel>\n</div>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-f1c80c8c167c4da5100c632a5e6535223f318692290aa6b333ab6c6474f24fe8f741ec61d29cf7666ea496dd69e5ef31456eedd9521cb5dd4a73e59423421156",
            "file": "src/app/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "conteudos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "[literal type]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selecao",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selecionado",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {\n  selecionado: number = 0\n  @Input() conteudos: [{titulo: string, conteudo:string}] = []\n  @Output() selecao = new EventEmitter<number>()\n\n  constructor() { }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header-menu {\n  height: auto;\n}\n.header-menu ul li {\n  height: auto;\n  display: inline-block;\n}\n.header-menu ul li button {\n  border-radius: 10%;\n  text-align: center;\n  color: rgb(0, 0, 0);\n  font-size: 14px;\n  line-height: 60px;\n  margin-right: 10px;\n  padding: 0 10px;\n  background-color: rgb(182, 181, 181);\n}\n.selected {\n  background-color: blue;\n  font-style: oblique;\n  border: 3px solid rgb(0, 0, 0);\n}\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<nav class='header-menu'>\n  <ul>\n    <li *ngFor=\"let item of conteudos, index as i\">\n      <button [ngClass]=\"{selected: i === selecionado}\"\n              (click)=\"selecionado = i; selecao.emit(i)\">\n         {{ item.titulo }}\n      </button>\n    </li>\n  </ul>\n</nav>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PainelComponent",
            "id": "component-PainelComponent-ba6851472486a88c9f2ba11b0b262a6ff61be4594f3d0ebe06c9911833979dac95f45b6ea45ae46722f3928a45c70ab26b134bdceb0865a1850787a1ebe71ee5",
            "file": "src/app/components/painel/painel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-painel",
            "styleUrls": [
                "./painel.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./painel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "conteudo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'app-painel',\n  templateUrl: './painel.component.html',\n  styleUrls: ['./painel.component.css']\n})\nexport class PainelComponent {\n  @Input() conteudo: string = '';\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".conteudo {\n  border-radius: 10%;\n  background-color: rgb(182, 181, 181);\n  height: 250px;\n  width: 500px;\n  text-align: center;\n  margin-left: 40px;\n}\n",
                    "styleUrl": "./painel.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"conteudo\" >\n  <p>{{ conteudo }}</p>\n</div>\n"
        },
        {
            "name": "QuestionComponent",
            "id": "component-QuestionComponent-7499863634bc92a74052ab1ae9e2854891460eee4be569f7fc19a7c1f5b27ca7d2275e2354608eb2fa2ca0593d0b508334316efb4784dfa0263814ac3a4ab6c8",
            "file": "src/app/components/question.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question",
            "styleUrls": [],
            "styles": [
                "\n    h2 {\n      font-weight: normal;\n      font-size: 20pt;\n      margin-top: 0;\n    }\n    button {\n      margin-right: 10px;\n      background-color: #ccc;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 3px;\n      padding: 2px 5px;\n    }\n    .selected {\n      font-weight: bold;\n      background-color: #aaa;\n    }\n  "
            ],
            "template": "<h2>{{ statement }}</h2>\n<button *ngFor=\"let option of options; let i = index\"\n        [ngClass]=\"{ selected: i === selection }\"\n        (click)=\"onSelection.emit(i)\">\n  {{ option }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "statement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelection",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\"\n\n@Component({\n  selector: 'app-question',\n  template: `\n    <h2>{{ statement }}</h2>\n    <button *ngFor=\"let option of options; let i = index\"\n            [ngClass]=\"{ selected: i === selection }\"\n            (click)=\"onSelection.emit(i)\">\n      {{ option }}\n    </button>\n  `,\n  styles: [`\n    h2 {\n      font-weight: normal;\n      font-size: 20pt;\n      margin-top: 0;\n    }\n    button {\n      margin-right: 10px;\n      background-color: #ccc;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 3px;\n      padding: 2px 5px;\n    }\n    .selected {\n      font-weight: bold;\n      background-color: #aaa;\n    }\n  `]\n})\nexport class QuestionComponent {\n  @Input() statement!: string    // enunciado da questão\n  @Input() options!: string[]    // opções da questão\n  @Input() selection?: number    // índice da opção selecionada, se houver\n  @Output() onSelection = new EventEmitter<number>() // quando o usuário selecionar uma opção, passa seu índice\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    h2 {\n      font-weight: normal;\n      font-size: 20pt;\n      margin-top: 0;\n    }\n    button {\n      margin-right: 10px;\n      background-color: #ccc;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 3px;\n      padding: 2px 5px;\n    }\n    .selected {\n      font-weight: bold;\n      background-color: #aaa;\n    }\n  \n"
        },
        {
            "name": "QuestionFormComponent",
            "id": "component-QuestionFormComponent-29a06c7e0c14dce33a6757406e657cab0ba342d736cb64761cbc6801f6b8e8ccde337ccc5e60e0d16002a3ca668e610d7250be0ee2e7d35f9605d836b21cbe9e",
            "file": "src/app/components/question-form/question-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question-form",
            "styleUrls": [
                "./question-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./question-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "question",
                    "defaultValue": "new Question()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Question",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSubmit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgForm"
                        }
                    ]
                },
                {
                    "name": "qstService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuestionService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { Question, QuestionService } from \"../../services/question.service\";\n\n@Component({\n  selector: 'app-question-form',\n  templateUrl: './question-form.component.html',\n  styleUrls: ['./question-form.component.css']\n})\nexport class QuestionFormComponent {\n  @Input() question: Question = new Question()\n  @Output() onSubmit = new EventEmitter()\n  @ViewChild(NgForm) form!: NgForm\n\n  constructor(public qstService: QuestionService) {\n  }\n\n  submit() {\n    this.onSubmit.emit({\n      statement: this.question.statement,\n      type: this.question.type,\n      options: [...this.question.options]\n    })\n    this.form.reset()\n    this.question = new Question()\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".qst-form {\n  --label-size: 150px;\n  --label-margin: 10px;\n  --label-width: calc(var(--label-size) + var(--label-margin));\n  --border-size: 1px;\n  --border-color: #ccc;\n  --border-radius: 5px;\n  --input-padding: 5px;\n  --input-number-size: 30pt;\n  padding: 20px;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n}\n.qst-form label {\n  width: var(--label-size);\n  display: inline-block;\n  text-align: right;\n  font-weight: bold;\n  margin-right: var(--label-margin);\n  vertical-align: top;\n}\n.qst-form .errors {\n  font-style: italic;\n  font-size: 10pt;\n  color: red;\n  margin-left: var(--label-width);\n  height: 20pt;\n}\n.qst-form .buttons {\n  margin-top: 10px;\n  padding-top: 10px;\n  border-top: var(--border-size) solid var(--border-color);\n  display: flex;\n  justify-content: flex-end;\n}\n.qst-form textarea {\n  height: 100px;\n  margin-bottom: -5pt;\n}\n.qst-form input[type=\"submit\"] {\n  padding: 4pt 8pt;\n}\n.qst-form input[type=\"radio\"]:not(:first-child) {\n  margin-left: 20px;\n}\n.qst-form input[type=\"text\"],\n.qst-form input[type=\"number\"],\n.qst-form textarea {\n  border-radius: var(--border-radius);\n  border: var(--border-size) solid var(--border-color);\n  padding: var(--input-padding);\n}\n.qst-form input[type=\"text\"],\n.qst-form textarea {\n  width: calc(100% - (var(--label-width) + 2 * (var(--border-size) + var(--input-padding))));\n}\n.qst-form input[type=\"number\"] {\n  width: var(--input-number-size);\n}\n",
                    "styleUrl": "./question-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "qstService",
                        "type": "QuestionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "qstService",
                        "type": "QuestionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form class=\"qst-form \" #questionForm=\"ngForm\" (ngSubmit)=\"questionForm.valid && submit()\">\n  <div>\n    <label>Enunciado</label>\n    <textarea #stat=\"ngModel\"\n              [(ngModel)]=\"question.statement\"\n              name=\"statement\"\n              required minlength=\"3\">\n    </textarea>\n    <div *ngIf=\"stat.touched && stat.errors\" class=\"errors\">\n      <div *ngIf=\"stat.errors['required']\">\n        Este campo é necessário\n      </div>\n      <div *ngIf=\"stat.errors['minlength']\">\n        Digite pelo menos 3 caracteres\n      </div>\n    </div>\n  </div>\n\n  <div>\n    <label>Tipo da questão:</label>\n    <span>\n      <input type=\"radio\" value=\"choice\" name=\"qstType\" [(ngModel)]=\"question.type\" />Objetiva\n      <input type=\"radio\" value=\"text\" name=\"qstType\" [(ngModel)]=\"question.type\" />Textual\n    </span>\n  </div>\n\n  <div *ngIf=\"question.type === 'choice'\">\n    <label>Número de opções</label>\n    <input type=\"number\"\n           name=\"length\"\n           #numOptions=\"ngModel\"\n           [(ngModel)] =\"question.options.length\"\n           min=\"2\" max=\"5\"\n    />\n    <div *ngIf=\"numOptions.dirty && numOptions.errors\" class=\"errors\">\n      <div *ngIf=\"numOptions.errors['min']\">\n        Deve haver pelo menos duas opções\n      </div>\n      <div *ngIf=\"numOptions.errors['max']\">\n        Deve haver no máximo cinco opções\n      </div>\n    </div>\n\n    <div *ngFor=\"let o of question.options; index as i; trackBy: trackByFn\">\n      <label>Opção {{i + 1}}</label>\n      <input type=\"text\"\n             #qstOption=\"ngModel\"\n             name=\"option-{{i}}\"\n             [(ngModel)]=\"question.options[i]\"\n             required\n      />\n      <div *ngIf=\"qstOption.dirty && qstOption.errors\" class=\"errors\">\n        <div *ngIf=\"qstOption.errors['required']\">\n          Digite o texto da opção\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <input type=\"submit\" value=\"Cadastrar\" [disabled]=\"questionForm.invalid\" />\n</form>\n"
        },
        {
            "name": "QuestionListComponent",
            "id": "component-QuestionListComponent-9d5ba2d347aa2abb55b2445e9558ced8547d093811797ab52b6a70ae80f6f80f9bf0f074923028dc35cb53ab43198bbac2d11865eb1276427edb57a7f444dc0d",
            "file": "src/app/components/question-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question-list",
            "styleUrls": [],
            "styles": [
                "\n    .box {\n      padding: 10px;\n      border: 1px solid #aaf;\n      border-radius: 5px;\n      margin: 10px;\n    }\n    .erase {\n      float: right;\n      z-index: 2;\n    }\n  "
            ],
            "template": "<app-question-form (onSubmit)=\"addQuestion($event)\"></app-question-form>\n<div class=\"box\" *ngFor=\"let question of questionService.questions; index as i\">\n  <button class=\"erase\" (click)=\"deleteQuestion(i)\">X</button>\n  <app-question\n    [statement]=\"question.statement\"\n    [options]=\"question.options\"\n  >\n  </app-question>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "questionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuestionService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addQuestion",
                    "args": [
                        {
                            "name": "question",
                            "type": "Question",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "Question",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteQuestion",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { Question, QuestionService } from \"../services/question.service\";\n\n@Component({\n  selector: 'app-question-list',\n  template: `\n    <app-question-form (onSubmit)=\"addQuestion($event)\"></app-question-form>\n    <div class=\"box\" *ngFor=\"let question of questionService.questions; index as i\">\n      <button class=\"erase\" (click)=\"deleteQuestion(i)\">X</button>\n      <app-question\n        [statement]=\"question.statement\"\n        [options]=\"question.options\"\n      >\n      </app-question>\n    </div>\n  `,\n  styles: [`\n    .box {\n      padding: 10px;\n      border: 1px solid #aaf;\n      border-radius: 5px;\n      margin: 10px;\n    }\n    .erase {\n      float: right;\n      z-index: 2;\n    }\n  `]\n})\nexport class QuestionListComponent {\n  constructor(public questionService: QuestionService) {}\n\n  addQuestion(question: Question) {\n    this.questionService.add(question)\n  }\n\n  deleteQuestion(index: number) {\n    this.questionService.delete(index)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .box {\n      padding: 10px;\n      border: 1px solid #aaf;\n      border-radius: 5px;\n      margin: 10px;\n    }\n    .erase {\n      float: right;\n      z-index: 2;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "questionService",
                        "type": "QuestionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "questionService",
                        "type": "QuestionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "QuizComponent",
            "id": "component-QuizComponent-de62f04181212a48f52bcf52c1d0605c7f13590d0eb5b50589d002d9ac0cee0ac92fac4759352d15f319b17bee93a54aaee79afcc0af47c6cded6aceeb66eb10",
            "file": "src/app/components/quiz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quiz",
            "styleUrls": [],
            "styles": [
                "\n    .quizPane {\n      padding: 50px;\n    }\n    .questionPane {\n      padding: 20px;\n      margin: 10px 0;\n      border-radius: 10px;\n      border: 1px solid #aaa;\n      background-color: #f0f0f0;\n    }\n    .questionNumber {\n      font-style: italic;\n      font-size: smaller;\n    }\n  "
            ],
            "template": "<div class=\"quizPane\">\n  <h1>Quiz</h1>\n  <div *ngIf=\"showResults(); else questionBlock\">\n    <div class=\"questionPane\">\n      <app-results [answers]=\"answers\"></app-results>\n    </div>\n    <button (click)=\"reset()\">Reinicia</button>\n  </div>\n  <ng-template #questionBlock>\n    <div class=\"questionPane\">\n      <div class=\"questionNumber\">\n        Questão {{ currentQuestion + 1 }} de {{ questions.length }}\n      </div>\n      <app-question\n        [statement]=\"questions[currentQuestion].statement\"\n        [options]=\"questions[currentQuestion].options\"\n        [selection]=\"currentOption\"\n        (onSelection)=\"select($event)\"\n      ></app-question>\n    </div>\n    <button (click)=\"confirm()\" [disabled]=\"currentOption === undefined\">\n      Confirma resposta\n    </button>\n  </ng-template>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "answers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Answer[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "currentOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "currentQuestion",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "questions",
                    "defaultValue": "[\n    new Question(\n      'Enunciado da 1ª questão',\n      'choice',\n      ['opção 1.1', 'opção 1.2', 'opção 1.3', 'opção 1.4']\n    ),\n    new Question(\n      'Enunciado da 2ª questão',\n      'choice',\n      ['opção 2.1', 'opção 2.2', 'opção 2.3', 'opção 2.4']\n    ),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Question[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "showResults",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfirma a opção selecionada pelo usuário como resposta da questão atual.",
                    "description": "<p>Confirma a opção selecionada pelo usuário como resposta da questão atual.</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReinicia o quiz, começando da 1ª questão e sem opção selecionada.",
                    "description": "<p>Reinicia o quiz, começando da 1ª questão e sem opção selecionada.</p>\n"
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAtualiza a opção selecionada pelo usuário.",
                    "description": "<p>Atualiza a opção selecionada pelo usuário.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\"\nimport { Question } from \"../services/question.service\"\nimport { Answer } from \"./results.component\"\n\n@Component({\n  selector: 'app-quiz',\n  template: `\n    <div class=\"quizPane\">\n      <h1>Quiz</h1>\n      <div *ngIf=\"showResults(); else questionBlock\">\n        <div class=\"questionPane\">\n          <app-results [answers]=\"answers\"></app-results>\n        </div>\n        <button (click)=\"reset()\">Reinicia</button>\n      </div>\n      <ng-template #questionBlock>\n        <div class=\"questionPane\">\n          <div class=\"questionNumber\">\n            Questão {{ currentQuestion + 1 }} de {{ questions.length }}\n          </div>\n          <app-question\n            [statement]=\"questions[currentQuestion].statement\"\n            [options]=\"questions[currentQuestion].options\"\n            [selection]=\"currentOption\"\n            (onSelection)=\"select($event)\"\n          ></app-question>\n        </div>\n        <button (click)=\"confirm()\" [disabled]=\"currentOption === undefined\">\n          Confirma resposta\n        </button>\n      </ng-template>\n    </div>\n  `,\n  styles: [`\n    .quizPane {\n      padding: 50px;\n    }\n    .questionPane {\n      padding: 20px;\n      margin: 10px 0;\n      border-radius: 10px;\n      border: 1px solid #aaa;\n      background-color: #f0f0f0;\n    }\n    .questionNumber {\n      font-style: italic;\n      font-size: smaller;\n    }\n  `]\n})\nexport class QuizComponent {\n  questions: Question[] = [\n    new Question(\n      'Enunciado da 1ª questão',\n      'choice',\n      ['opção 1.1', 'opção 1.2', 'opção 1.3', 'opção 1.4']\n    ),\n    new Question(\n      'Enunciado da 2ª questão',\n      'choice',\n      ['opção 2.1', 'opção 2.2', 'opção 2.3', 'opção 2.4']\n    ),\n  ]\n  currentQuestion = 0\n  currentOption: number | undefined\n  answers: Answer[] = []\n\n  showResults = () => this.currentQuestion >= this.questions.length\n\n  /** Atualiza a opção selecionada pelo usuário. */\n  select(optionIndex: number) {\n    this.currentOption = optionIndex\n  }\n\n  /** Confirma a opção selecionada pelo usuário como resposta da questão atual. */\n  confirm() {\n    if (this.currentOption !== undefined) {\n      const question = this.questions[this.currentQuestion]\n      this.answers[this.currentQuestion] = {\n        statement: question.statement,\n        option: question.options[this.currentOption]\n      }\n    }\n    // depois de confirmar a resposta, vai para próxima questão e cancela a opção selecionada\n    this.currentQuestion++\n    this.currentOption = undefined\n  }\n\n  /** Reinicia o quiz, começando da 1ª questão e sem opção selecionada. */\n  reset() {\n    this.currentQuestion = 0\n    this.currentOption = undefined\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .quizPane {\n      padding: 50px;\n    }\n    .questionPane {\n      padding: 20px;\n      margin: 10px 0;\n      border-radius: 10px;\n      border: 1px solid #aaa;\n      background-color: #f0f0f0;\n    }\n    .questionNumber {\n      font-style: italic;\n      font-size: smaller;\n    }\n  \n"
        },
        {
            "name": "ResultsComponent",
            "id": "component-ResultsComponent-106835f9f253707b1abd832b93ec93da6230fc4ba6c614975dbb554af8b77d8dbe0e220d5bb0d06619b37517816dcd94d9830a359eed805039dcd77054aecf26",
            "file": "src/app/components/results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-results",
            "styleUrls": [],
            "styles": [
                "\n    .questionResult + .questionResult {\n      margin-top: 10px;\n    }\n    .questionResult h3 {\n      margin: 0;\n    }\n  "
            ],
            "template": "<div class=\"questionResult\" *ngFor=\"let answer of answers; let i = index\">\n  <h3>Questão {{ i + 1 }}</h3>\n  {{ answer.statement }}: {{ answer.option }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "answers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Answer[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\"\n\n/** Dados da resposta de uma questão. */\nexport interface Answer {\n  statement: string  // enunciado da questão\n  option: string     // resposta da opção escolhida\n}\n\n@Component({\n  selector: 'app-results',\n  template: `\n    <div class=\"questionResult\" *ngFor=\"let answer of answers; let i = index\">\n      <h3>Questão {{ i + 1 }}</h3>\n      {{ answer.statement }}: {{ answer.option }}\n    </div>\n  `,\n  styles: [`\n    .questionResult + .questionResult {\n      margin-top: 10px;\n    }\n    .questionResult h3 {\n      margin: 0;\n    }\n  `]\n})\nexport class ResultsComponent {\n  @Input() answers!: Answer[]\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .questionResult + .questionResult {\n      margin-top: 10px;\n    }\n    .questionResult h3 {\n      margin: 0;\n    }\n  \n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-5968cbc769d44d050acf3bcc9166208665aa7f0880ab7700ac08361b64e3747a2452da88b5b37746699592f780be685651a1d8a507012bbdc964b08460ee888b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core'\nimport {FormsModule} from '@angular/forms'\nimport {BrowserModule} from '@angular/platform-browser'\n\nimport {AppComponent} from './app.component'\nimport {QuestionFormComponent} from './components/question-form/question-form.component'\nimport {QuestionListComponent} from './components/question-list.component'\nimport {QuestionComponent} from './components/question.component'\nimport {QuizComponent} from './components/quiz.component'\nimport {ResultsComponent} from './components/results.component'\nimport {MainComponent} from \"./components/main/main.component\";\nimport {PainelComponent} from \"./components/painel/painel.component\";\nimport {MenuComponent} from \"./components/menu/menu.component\";\nimport {ConteudoFormComponent} from './components/conteudo-form/conteudo-form.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        QuizComponent,\n        QuestionComponent,\n        ResultsComponent,\n        QuestionFormComponent,\n        QuestionListComponent,\n        MainComponent,\n        PainelComponent,\n        MenuComponent,\n        ConteudoFormComponent\n    ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ConteudoFormComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PainelComponent"
                        },
                        {
                            "name": "QuestionComponent"
                        },
                        {
                            "name": "QuestionFormComponent"
                        },
                        {
                            "name": "QuestionListComponent"
                        },
                        {
                            "name": "QuizComponent"
                        },
                        {
                            "name": "ResultsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Main",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tab/Main.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Menu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tab/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Painel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tab/Painel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tab/Main.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MainComponent>",
                "defaultValue": "(args: MainComponent) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tab/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MenuComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tab/Painel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PainelComponent>",
                "defaultValue": "(args) => ({\n  props: args\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Tab/Main.stories.ts": [
                {
                    "name": "Main",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tab/Main.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tab/Main.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MainComponent>",
                    "defaultValue": "(args: MainComponent) => ({\n  props: args\n})"
                }
            ],
            "src/stories/Tab/Menu.stories.ts": [
                {
                    "name": "Menu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tab/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tab/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MenuComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Tab/Painel.stories.ts": [
                {
                    "name": "Painel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tab/Painel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tab/Painel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PainelComponent>",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/conteudo-form/conteudo-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConteudoFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/painel/painel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PainelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/question-form/question-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/question-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/question.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/quiz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuizComponent",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/results.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Answer",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/conteudo.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConteudoAba",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/conteudo.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PainelInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/conteudo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConteudoService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/question.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Question",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/question.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuestionService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tab/Main.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Main",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tab/Main.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tab/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tab/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tab/Painel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Painel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tab/Painel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}